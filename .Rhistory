filter(year == 2021) %>%
group_by(fips) %>%
summarize(deaths = sum(new_deaths, na.rm = TRUE)) %>%
left_join(pop, by = "fips") %>%
mutate(death_ratio = 100 * (deaths / DEATHS2021)) %>%
select(CTYNAME, deaths, DEATHS2021, death_ratio) %>%
filter(death_ratio > 20)
ggplot(death_data, aes(x = reorder(CTYNAME, death_ratio), y = death_ratio)) +
geom_col(fill = "red") +
coord_flip() +
labs(
title = "Counties Where COVID Deaths Account for 20%+ of Total Deaths (2021)",
x = "Death_Ratio",
y = "City"
) +
theme_light()
death_data <- colorado %>%
mutate(year = year(date)) %>%
filter(year == 2021) %>%
group_by(fips) %>%
summarize(deaths = sum(new_deaths, na.rm = TRUE)) %>%
left_join(pop, by = "fips") %>%
mutate(death_ratio = 100 * (deaths / DEATHS2021)) %>%
select(CTYNAME, deaths, DEATHS2021, death_ratio) %>%
filter(death_ratio > 20)
ggplot(death_data, aes(x = reorder(CTYNAME, death_ratio), y = death_ratio)) +
geom_col(fill = "red") +
coord_flip() +
labs(
title = "Counties Where COVID Deaths Account for 20%+ of Total Deaths (2021)",
x = "City Name",
y = "Death Ratio"
) +
theme_light()
death_data <- colorado %>%
mutate(year = year(date)) %>%
filter(year == 2021) %>%
group_by(fips) %>%
summarize(deaths = sum(new_deaths, na.rm = TRUE)) %>%
left_join(pop, by = "fips") %>%
mutate(death_ratio = 100 * (deaths / DEATHS2021)) %>%
select(CTYNAME, deaths, DEATHS2021, death_ratio) %>%
filter(death_ratio > 20)
ggplot(death_data, aes(x = reorder(CTYNAME, death_ratio), y = death_ratio)) +
geom_col(fill = "red") +
coord_flip() +
labs(
title = "Counties Where COVID Deaths Account for 20%+ of Total Deaths (2021)",
x = "City Name",
y = "Death Ratio"
) +
theme_light()
https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv
https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv
https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv
library(tidyverse); library(flextable)
data = read_csv( 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
my.date <- as.Date("2022-02-01")
my.state <- "Colorado"
class(my.date)
class(my.state)
colorado <- data %>%
filter(state == my.state) %>%
group_by(county) %>%
arrange(date) %>%
mutate(
new_cases = cases - lag(cases),
new_deaths = deaths - lag(deaths)
) %>%
ungroup()
colorado %>%
filter(date == my.date) %>%
slice_max(cases, n = 5) %>%
select(Date = date, County = county, Cases = cases) %>%
flextable() %>%
set_caption("Most Total Cases")
colorado %>%
filter(date == my.date) %>%
slice_max(new_cases, n = 5) %>%
select(Date = date, County = county, Cases = new_cases) %>%
flextable() %>%
set_caption("Most New Cases")
pop_url <-"https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv"
pop <- read.csv(pop_url) %>%
filter(COUNTY != 0) %>%  # Remove state-level rows
mutate(fips = paste0(sprintf("%02d", STATE), sprintf("%03d", COUNTY))) %>%
select(fips, contains("NAME"), contains("2021"))  # Keep relevant columns
names(pop)
dim(pop)
nrow(pop)
str(pop)
glimpse(pop)
range(pop$POPESTIMATE2021)
perCap <- inner_join(
colorado,
select(pop, fips, pop = POPESTIMATE2021),
by = "fips"
) %>%
filter(date == my.date) %>%
mutate(
cumPerCap = cases / pop,
newCasesPerCap = new_cases / pop,
newDeathsPerCap = new_deaths / pop
)
perCap %>%
slice_max(cumPerCap, n = 5) %>%
select(Date = date, County = county, `Per Capita Cases` = cumPerCap) %>%
flextable() %>%
set_caption("Top 5 Counties with Most Cumulative Cases Per Capita")
perCap %>%
slice_max(newCasesPerCap, n = 5) %>%
select(Date = date, County = county, `Per Capita New Cases` = newCasesPerCap) %>%
flextable() %>%
set_caption("Top 5 Counties with Most New Cases Per Capita")
safe <- pop %>%
inner_join(colorado, by = "fips") %>%
filter(between(date, my.date - 13, my.date)) %>%
group_by(county) %>%
summarize(lag = sum(new_cases, na.rm = TRUE) / (max(POPESTIMATE2021, na.rm = TRUE) / 100000)
) %>%
ungroup() %>%
select(County = county, Cases = lag) %>%
slice_max(Cases, n = 10) %>%
flextable() %>%
set_caption("Cases per 100,000 in the last 14 days")
safe
death_data <- colorado %>%
mutate(year = year(date)) %>%
filter(year == 2021) %>%
group_by(fips) %>%
summarize(deaths = sum(new_deaths, na.rm = TRUE)) %>%
left_join(pop, by = "fips") %>%
mutate(death_ratio = 100 * (deaths / DEATHS2021)) %>%
select(CTYNAME, deaths, DEATHS2021, death_ratio) %>%
filter(death_ratio > 20)
ggplot(death_data, aes(x = reorder(CTYNAME, death_ratio), y = death_ratio)) +
geom_col(fill = "red") +
coord_flip() +
labs(
title = "Counties Where COVID Deaths Account for 20%+ of Total Deaths (2021)",
x = "City Name",
y = "Death Ratio"
) +
theme_light()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
state_covid <- data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
library(tidyverse); library(flextable)
covid_data = read_csv( 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
names(covid_data)  # Check column names
head(covid_data)   # View first few rows
str(covid_data)    # See structure of the dataset
covid_data <- covid_data %>%
group_by(state, county) %>%
arrange(state, county, date) %>%
mutate(new_cases = cases - lag(cases, default = 0)) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = daily_new_cases), fill = "pink", col = NA) +
geom_line(aes(y = roll), col = "darkred", size = 1) +
theme_linedraw() +
facet_wrap(~ state, nrow = 2, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases with 7-Day Rolling Average",
x = "Date",
y = "New Cases"
)
covid_data <- covid_data %>%
group_by(state, county) %>%
arrange(state, county, date) %>%
mutate(new_cases = cases - lag(cases, default = 0)) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = daily_new_cases), fill = "pink", col = NA) +
geom_line(aes(y = roll), col = "darkred", size = 1) +
theme_linedraw() +
facet_wrap(~ state, nrow = 2, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases with 7-Day Rolling Average",
x = "Date",
y = "New Cases"
)
state_pop <- pop %>%
select(state, state_population = POPESTIMATE2021)
names(pop)  # Check column names
head(pop)   # View the first few rows
str(pop)    # See structure of the dataset
covid_data <- covid_data %>%
group_by(state, county) %>%
arrange(state, county, date) %>%
mutate(new_cases = cases - lag(cases, default = 0)) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = daily_new_cases), fill = "pink", col = NA) +
geom_line(aes(y = roll), col = "darkred", size = 1) +
theme_linedraw() +
facet_wrap(~ state, nrow = 2, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases with 7-Day Rolling Average",
x = "Date",
y = "New Cases"
)
state_pop <- pop %>%
filter(CTYNAME == STNAME) %>%
select(state = STNAME, state_population = POPESTIMATE2021)
state_covid_percap <- state_covid %>%
inner_join(state_pop, by = "state") %>%
mutate(
new_cases_per_capita = (new_cases / state_population) * 100000,
roll_avg_per_capita = (roll_avg / state_population) * 100000
)
covid_data <- covid_data %>%
group_by(state, county) %>%
arrange(state, county, date) %>%
mutate(new_cases = cases - lag(cases, default = 0)) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = daily_new_cases), fill = "pink", col = NA) +
geom_line(aes(y = roll), col = "darkred", size = 1) +
theme_linedraw() +
facet_wrap(~ state, nrow = 2, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases with 7-Day Rolling Average",
x = "Date",
y = "New Cases"
)
state_pop <- pop %>%
filter(CTYNAME == STNAME) %>%
select(state = STNAME, state_population = POPESTIMATE2021)
state_covid_percap <- state_covid %>%
inner_join(state_pop, by = "state") %>%
mutate(
new_cases_per_capita = (new_cases / state_population) * 100000,
roll_avg_per_capita = (roll_avg / state_population) * 100000
)
names(state_covid)  # Check column names
head(state_covid)   # View first few rows
str(state_covid)    # Check structure of dataset
names(state_covid)  # Check column names
head(state_covid)   # View first few rows
str(state_covid)    # Check structure of dataset
covid_data <- covid_data %>%
group_by(state, county) %>%
arrange(state, county, date) %>%
mutate(new_cases = cases - lag(cases, default = 0)) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = daily_new_cases), fill = "pink", col = NA) +
geom_line(aes(y = roll), col = "darkred", size = 1) +
theme_linedraw() +
facet_wrap(~ state, nrow = 2, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases with 7-Day Rolling Average",
x = "Date",
y = "New Cases"
)
state_pop <- pop %>%
filter(CTYNAME == STNAME) %>%
select(state = STNAME, state_population = POPESTIMATE2021)
state_covid_percap <- state_covid %>%
inner_join(state_pop, by = "state") %>%
mutate(
daily_new_cases_per_capita = (daily_new_cases / state_population) * 100000,
roll_avg_per_capita = (roll / state_population) * 100000
)
ggplot(state_covid_percap, aes(x = date, y = roll_avg_per_capita, color = state)) +
geom_line(size = 1.2) +
labs(
title = "7-Day Rolling Average of New Cases Per Capita",
x = "Date",
y = "New Cases Per 100,000 People",
color = "State"
) +
theme_minimal() +
theme(legend.position = "right")
covid_data <- covid_data %>%
group_by(state, county) %>%
arrange(state, county, date) %>%
mutate(new_cases = cases - lag(cases, default = 0)) %>%
ungroup()
state_covid <- covid_data %>%
filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) %>%
group_by(date, state) %>%
summarise(daily_new_cases = sum(new_cases, na.rm = TRUE)) %>%
ungroup() %>%
arrange(state, date) %>%
group_by(state) %>%
mutate(roll = zoo::rollmean(daily_new_cases, k = 7, fill = NA, align = "right")) %>%
ungroup()
ggplot(state_covid, aes(x = date)) +
geom_col(aes(y = daily_new_cases), fill = "pink", col = NA) +
geom_line(aes(y = roll), col = "darkred", size = 1) +
theme_linedraw() +
facet_wrap(~ state, nrow = 2, scales = "free_y") +
labs(
title = "Daily COVID-19 Cases with 7-Day Rolling Average",
x = "Date",
y = "New Cases"
)
state_pop <- pop %>%
group_by(STNAME) %>%
summarise(state_pop = sum(POPESTIMATE2021, na.rm = TRUE))
state_covid_percap <- state_covid %>%
inner_join(state_pop, by = c("state" = "STNAME")) %>%
mutate(
perCap = daily_new_cases / state_pop * 100000,
roll_perCap = zoo::rollmean(perCap, k = 7, align = "right", fill = NA)
)
ggplot(state_covid_percap, aes(x = date)) +
geom_line(aes(y = roll_perCap, color = state), size = 1) +
theme_linedraw() +
labs(
title = "Cumulative COVID-19 Cases",
x = "Date",
y = "Cases Per 100,000 People",
color = "State"
)
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
covid_with_location <- covid_data %>%
inner_join(county_centroids, by = "fips")
wm_center <- covid_with_location %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
total_cases = sum(cases, na.rm = TRUE),
month = format(date, "%m")
) %>%
arrange(date) %>%
mutate(day_index = row_number())
ggplot(wm_center) +
borders("state", fill = "gray90", colour = "white") +
geom_point(aes(x = wmX_c, y = wmY_c, size = total_cases, color = month), alpha = 0.8) +
scale_size(range = c(2, 10)) +
theme_linedraw() +
labs(
title = "Weighted Center of COVID-19 Cases Over Time",
x = "Longitude",
y = "Latitude",
color = "Month",
size = "Total Cases"
) +
theme(legend.position = "right")
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
covid_with_location <- covid_data %>%
inner_join(county_centroids, by = "fips")
wm_center <- covid_with_location %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
total_cases = sum(cases, na.rm = TRUE),
month = format(date, "%m")
) %>%
arrange(date) %>%
mutate(day_index = row_number())
ggplot(wm_center) +
borders("state", fill = "gray90", colour = "white") +
geom_point(aes(x = wmX_c, y = wmY_c, size = total_cases, color = month), alpha = 0.8) +
scale_size(range = c(2, 10)) +
theme_linedraw() +
labs(
title = "Weighted Center of COVID-19 Cases Over Time",
x = "Longitude",
y = "Latitude",
color = "Month",
size = "Total Cases"
) +
theme(legend.position = "none")
library(patchwork)
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
covid_with_location <- covid_data %>%
inner_join(county_centroids, by = "fips")
wm_center <- covid_with_location %>%
group_by(date) %>%
summarise(
wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
total_cases = sum(cases, na.rm = TRUE),
wmX_d = sum(LON * deaths, na.rm = TRUE) / sum(deaths, na.rm = TRUE),
wmY_d = sum(LAT * deaths, na.rm = TRUE) / sum(deaths, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE)
) %>%
arrange(date) %>%
mutate(day_index = row_number())
p_cases <- ggplot(wm_center) +
borders("state", fill = "gray90", colour = "white") +
geom_point(aes(x = wmX_c, y = wmY_c, size = total_cases), color = "red", alpha = 0.5) +
theme_linedraw() +
labs(
title = "Weighted Center of COVID-19 Cases",
x = "",
y = "",
size = "Cases"
) +
theme(legend.position = "none")
p_deaths <- ggplot(wm_center) +
borders("state", fill = "gray90", colour = "white") +
geom_point(aes(x = wmX_d, y = wmY_d, size = total_deaths), color = "navy", alpha = 0.5) +
theme_linedraw() +
labs(
title = "Weighted Center of COVID-19 Deaths",
x = "",
y = "",
size = "Deaths"
) +
theme(legend.position = "none")
p_cases | p_deaths
# Check if 'data' exists and is a data frame
if (!exists("data")) {
stop("Error: The dataset 'data' does not exist. Load the dataset before filtering.")
}
# Check the structure of 'data'
str(data)  # Should show columns including 'state' and 'date'
# View the first few rows
head(data)
# Check if 'state' column exists in 'data'
if (!"state" %in% names(data)) {
stop("Error: The column 'state' is missing from 'data'.")
}
# Check if 'my.state' is defined
if (!exists("my.state")) {
stop("Error: 'my.state' is not defined. Set it, e.g., my.state <- 'Colorado'")
}
p_cases | p_deaths
